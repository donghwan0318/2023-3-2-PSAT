} else if (is.integer(test[[col]])) {
test[[col]] <- as.numeric(test[[col]])
}
}
str(train)
par(cex = 0.8)
train %>% select(class,checking_status,savings_status,property_magnitude) %>% md.pattern(plot=TRUE,rotate.names=TRUE)
mice.den
install.packages("CORElearn", repos = "http://cran.us.r-project.org")
train %>% select(class,checking_status,savings_status,property_magnitude) %>% missing_pairs() %>%  + theme(
text = element_text(size = 8)  # 원하는 글자 크기로 조절 그래도 겹치네;;
)
train$checking_status
install.packages("rms",repos="http://cran.us.r-project.org")
install.packages("finalfit",repos="http://cran.us.r-project.org")
install.packages("gridExtra",repos="http://cran.us.r-project.org")
install.packages("CORElearn",repos="http://cran.us.r-project.org")
install.packages("lightgbm",repos="http://cran.us.r-project.org")
library(tidyverse)
library(rms)
library(mice)
library(finalfit)
library(gridExtra)
library(randomForest)
library(RColorBrewer)
library(CORElearn)
library(lightgbm)
library(caret)
getwd()
train_data = read.csv("train.csv")
test_data = read.csv("test.csv")
# 대강 살펴보기
train_data %>% head(3)
# 차원확인하기
train_data %>% dim()
# 자료 타입 확인하기
# x변수가 정수형과 범주형으로 구성되어있음.
train_data %>% str()
# 기초통계량 확인하기
train_data %>% describe()
# 결측치 확인 결과 없음.
train_data %>% is.na() %>% sum()
# 불필요한 열 제거.
train <- train_data %>% select(-c(id,X))
test <- test_data %>% select(-c(id,X))
train %>% colnames() %>% length()
test %>% colnames() %>% length()
# 열 이름 바꾸기.
for (i in 1:21){
names(train)[[i]] <- strsplit(names(train)[[i]],"\\.") %>% map_chr(.,2)
names(test)[[i]] <- strsplit(names(test)[[i]],"\\.") %>% map_chr(.,2)
}
names(train)
names(test)
# personal_status 열로 파생변수 만들기.
train <- train %>%
mutate(sex = strsplit(personal_status," ") %>% map_chr(.,1),
marital_status = strsplit(personal_status," ") %>% map_chr(.,2)
) %>%
select(-(personal_status))
test <- test %>%
mutate(sex = strsplit(personal_status," ") %>% map_chr(.,1),
marital_status = strsplit(personal_status," ") %>% map_chr(.,2)
) %>%
select(-(personal_status))
names(train)
print("--------------------------------------------------------------------")
names(test)
#결측치 변경 전 결측치 갯수 확인
cat('train missing before : ',
sum(train['checking_status']=='no checking') + sum(train['savings_status']=='no known savings')+sum(train['property_magnitude']=='no known property'),end= "\n")
cat('test missing before : ',
sum(test['checking_status']=='no checking') + sum(test['savings_status']=='no known savings')+sum(test['property_magnitude']=='no known property'))
# 결측치 변경 후 결측치 갯수 동일
train <- train %>%
mutate(checking_status = ifelse(checking_status=="no checking",NA,checking_status),
savings_status = ifelse(savings_status == "no known savings",NA,savings_status),
property_magnitude = ifelse(property_magnitude == "no known property",NA,property_magnitude))
test <- test %>%
mutate(checking_status = ifelse(checking_status=="no checking",NA,checking_status),
savings_status = ifelse(savings_status == "no known savings",NA,savings_status),
property_magnitude = ifelse(property_magnitude == "no known property",NA,property_magnitude))
train %>% is.na() %>% sum() %>% cat('train missing after : ', ., '\n')
test %>% is.na() %>% sum() %>% cat('train missing after : ', ., '\n')
# 전처리전 갯수확인
train %>% filter(marital_status=='div/dep/mar' |
marital_status=='div/sep' |
marital_status=='mar/wid') %>% dim() %>%
cat('train marital_status before : ', ., '\n')
test %>% filter(marital_status=='div/dep/mar' |
marital_status=='div/sep' |
marital_status=='mar/wid') %>% dim() %>%
cat('test marital_status before : ', ., '\n')
train %>% filter(credit_history=="no credits/all paid") %>% dim() %>%
cat('train credit_history before : ', ., '\n')
test %>% filter(credit_history=="no credits/all paid") %>% dim() %>%
cat('test credit_history before : ', ., '\n')
train <- train %>%
mutate(credit_history = ifelse(credit_history=="no credits/all paid","no credits",credit_history),
marital_status = ifelse( marital_status == "div/sep" |
marital_status == "mar/wid",
"div/dep/mar",marital_status))
test <- test %>%
mutate(credit_history = ifelse(credit_history=="no credits/all paid","no credits",credit_history),
marital_status = ifelse( marital_status == "div/sep" |
marital_status == "mar/wid",
"div/dep/mar",marital_status))
# 전처리 후 갯수 확인
train %>% filter(marital_status=='div/dep/mar') %>% dim() %>%
cat('train marital_status after : ', ., '\n')
test %>% filter(marital_status=='div/dep/mar') %>% dim() %>%
cat('test marital_status after : ', ., '\n')
train %>% filter(credit_history=="no credits") %>% dim() %>%
cat('train credit_history after : ', ., '\n')
test %>% filter(credit_history=="no credits") %>% dim() %>%
cat('test credit_history after : ', ., '\n')
# unique 확인
train %>% select(checking_status) %>% distinct()
train %>% select(savings_status) %>% distinct()
train %>% select(employment) %>% distinct()
# 순서형 자료로 변환
train <- train %>%
mutate(
checking_status = case_when(
checking_status == "<0"~1,
checking_status == "0<=X<200"~2,
checking_status == ">=200"~3,
)
)
train <- train %>%
mutate(
savings_status = case_when(
savings_status == "<100"~1,
savings_status == "100<=X<500"~2,
savings_status == "500<=X<1000"~3,
savings_status == ">=1000"~4
)
)
train <- train %>%
mutate(
employment = case_when(
employment == "unemployed"~1,
employment == "<1"~2,
employment == "1<=X<4"~3,
employment == "4<=X<7"~4,
employment == ">=7"~5,
)
)
# test에도 동일하게 순서형 자료로 변환
test <- test %>%
mutate(
checking_status = case_when(
checking_status == "<0"~1,
checking_status == "0<=X<200"~2,
checking_status == ">=200"~3,
)
)
test <- test %>%
mutate(
savings_status = case_when(
savings_status == "<100"~1,
savings_status == "100<=X<500"~2,
savings_status == "500<=X<1000"~3,
savings_status == ">=1000"~4
)
)
test <- test %>%
mutate(
employment = case_when(
employment == "unemployed"~1,
employment == "<1"~2,
employment == "1<=X<4"~3,
employment == "4<=X<7"~4,
employment == ">=7"~5,
)
)
# 처리후 unique 확인
train %>% select(checking_status) %>% distinct()
train %>% select(savings_status) %>% distinct()
train %>% select(employment) %>% distinct()
## 변환 전 데이터 type확인
str(train)
# 변환 후 데이터 type 확인
for (col in names(train)) {
if (is.character(train[[col]])) {
train[[col]] <- as.factor(train[[col]])
} else if (is.integer(train[[col]])) {
train[[col]] <- as.numeric(train[[col]])
}
}
for (col in names(test)) {
if (is.character(test[[col]])) {
test[[col]] <- as.factor(test[[col]])
} else if (is.integer(test[[col]])) {
test[[col]] <- as.numeric(test[[col]])
}
}
str(train)
par(cex = 0.8)
train %>% select(class,checking_status,savings_status,property_magnitude) %>% md.pattern(plot=TRUE,rotate.names=TRUE)
mice.den
install.packages("CORElearn", repos = "http://cran.us.r-project.org")
train %>% select(class,factor(checking_status),factor(savings_status),property_magnitude) %>% missing_pairs() %>%  + theme(
text = element_text(size = 8)  # 원하는 글자 크기로 조절 그래도 겹치네;;
)
train %>% select(class,as.factor(checking_status),as.factor(savings_status),property_magnitude) %>% missing_pairs() %>%  + theme(
text = element_text(size = 8)  # 원하는 글자 크기로 조절 그래도 겹치네;;
)
z$checking_status<-as.factor(train$checking_status)
z$savings_status<-as.factor(train$savings_status)
z<-train
z$checking_status<-as.factor(train$checking_status)
z$savings_status<-as.factor(train$savings_status)
z %>% select(class,checking_status,savings_status,property_magnitude) %>% missing_pairs() %>%  + theme(
text = element_text(size = 8)  # 원하는 글자 크기로 조절 그래도 겹치네;;
)
train %>% select(class,checking_status,savings_status,property_magnitude) %>% missing_pairs() %>%  + theme(
text = element_text(size = 8)  # 원하는 글자 크기로 조절 그래도 겹치네;;
)
z<-train
z$checking_status<-as.factor(train$checking_status)
z$savings_status<-as.factor(train$savings_status)
z %>% select(class,checking_status,savings_status,property_magnitude) %>% missing_pairs() %>%  + theme(
text = element_text(size = 8))
z<-train
z$checking_status<-as.factor(train$checking_status)
z$savings_status<-as.factor(train$savings_status)
z %>% select(class,checking_status,savings_status,property_magnitude) %>% missing_pairs() %>%  + theme(
text = element_text(size = 8))
train %>% select(class,checking_status,savings_status,property_magnitude) %>% missing_pairs() %>%  + theme(
text = element_text(size = 8)  # 글자 크기 조절
)
z<-train
z$checking_status<-as.factor(train$checking_status)
z$savings_status<-as.factor(train$savings_status)
z %>% select(class,checking_status,savings_status,property_magnitude) %>% missing_pairs() %>%  + theme(
text = element_text(size = 8))
z<-train
z$checking_status<-as.factor(train$checking_status)
z$savings_status<-as.factor(train$savings_status)
z %>% select(class,checking_status,savings_status,property_magnitude) %>% missing_pairs() %>%  + theme(
text = element_text(size = 8))
소득 p034 자산 p036 edu job
install.packages("readstata13",repos="http://cran.us.r-project.org")
install.packages("tidyverse",repos="http://cran.us.r-project.org")
library(readstata13)
library(tidyverse)
library(magrittr)
# 데이터 불러오기
setwd("D:/3학년/2학기/32기피셋/클린업/2주차/[23년도 2학기]클린업 2주차 패키지/data")
goms17 <- read.dta13("goms2017.dta")
goms18 <- read.dta13("goms2018.dta")
goms16_col <- read.dta13("goms_col_16.dta")
goms17_col <- read.dta13("goms_col_17.dta")
goms17 %<>% select(g161pid:g161gradum,c("g161f","g161p") %>% starts_with)
goms18 %<>% select(g171pid:g171gradum,c("g171f","g171p") %>% starts_with)
#필요한 열 선택하고 나머지 지우기
#추후 병합할 예정
goms17_161f <- goms17 %>% select(g161f001:g161f017,g161f170)
goms18_171f <- goms18 %>% select(g171f001:g171f017)
goms17 %<>% select(-starts_with("g161f"))
goms18 %<>% select(-starts_with("g171f"))
#필요한 열 선택하고 나머지 지우기
#추후 병합할 예정
goms17_161p <- goms17 %>% select(g161p018:g161p036)
goms18_171p <- goms18 %>% select(g171p018:g171p036)
goms17 %<>%  select(-starts_with("g161p"),g161pid)
goms18 %<>%  select(-starts_with("g171p"),g171pid)
goms18 %<>% select(-c(g171dpmt_n,g171major_n))
# 문제 3,4 한거 병합
goms17 <- bind_cols(goms17_161f,goms17_161p,goms17)
goms18 <- bind_cols(goms18_171f,goms18_171p,goms18)
# id 기준으로 병합
goms17 <- left_join(goms17,goms16_col %>% select(pid,colnam),by=c("g161pid"="pid"))
goms18 <- left_join(goms18,goms17_col %>% select(pid,colnam),by=c("g171pid"="pid"))
# 앞에 붙은 접두사 제거하기
goms17 %<>% rename_with(~gsub("g161","",.))
goms18 %<>% rename_with(~gsub("g171","",.))
# 싹다 병합하기
goms17 %<>% mutate(year = "2017")
goms18 %<>% mutate(year = "2018")
data <- bind_rows(goms17,goms18)
# 4년제만 선택
data %<>% filter(school=='4년제')
# 전처리 된거 확인인
data %>% select(school) %>% unique
# 1988~1994 출생자 선택
data %<>% filter(birthy>=1988 & birthy <=1994)
# 전처리 확인
data %>% select(birthy) %>% unique
# 졸업시기와 대학입학 시기 간견이 3년 이상인 경우 제거
data %<>% filter(f011-f001<3)
# 전처리 확인
data %>% filter(f011-f001 >= 3) %>% dim
# 편입일 경우 제거
data %<>% filter(f010!="편입")
# 전처리 확인
data %>% filter(f010=="편입") %>% dim
# 상위권 대학교는 1로 나머지는 0 으로 변경
target_univ<-c("경희대학교","고려대학교","서강대학교","서울대학교","서울시립대학교","성균관대학교","연세대학교","이화여대학교","중앙대학교","한국외국어대학교","한양대학교","한국과학기술원","포항공과대학교")
data %<>% mutate(colnam = ifelse((colnam %in% target_univ | majorcat =="의약"),1,0))
# 전처리 확인
data %>% filter(colnam==1) %>% dim
# p034 모름/무응답 제거하기
data %<>% filter(p034!="모름/무응답")
# 소득분위 중위값으로 대체하기
data %<>% mutate(
p034 = case_when(
p034 == "1,000만원 이상" ~1000,
p034 == "700~1,000만원 미만" ~ 850,
p034 == "500~700만원 미만" ~ 600,
p034 == "400~500만원 미만" ~ 450,
p034 == "300~400만원 미만" ~ 350,
p034 == "200~300만원 미만" ~ 250,
p034 == "100~200만원 미만" ~ 150,
p034 == "100만원 미만" ~ 100,
p034 == "소득없음" ~ 0,
p034 == "안계심(사망)" ~ 0,
)
)
# 백분위 구하고 잘 변경되나 확인
data %>% group_by(f011) %>% mutate(p034 = (rank(p034)/n()*100) %>% round(0)) %>% ungroup %>% select(f011,p034) %>% head(3)
# 분위값으로 대체하기
data %<>% group_by(f011) %>% mutate(p034 = (rank(p034)/n()*100) %>% round(0)) %>% ungroup
data %>% select(p036) %>% unique
# 모름/무응답 제거
data %<>% filter(p036!="모름/무응답")
# 부모 자산 정도 중위값 대체하기
data %<>% mutate(
p036 = case_when(
p036 == "10억 원 이상" ~10,
p036 == "5억 원 ~ 10억 원 미만" ~ 7.5,
p036 == "3억 원 ~ 5억 원 미만" ~ 4,
p036 == "1억 5천만 원 ~ 3억 원 미만" ~ 2.25,
p036 == "5천만 원 ~ 1억 5천만 원 미만" ~ 1,
p036 == "5천만 원 미만" ~ 0.5,
p036 == "안계심(사망)" ~ 0,
)
)
# 백분위 구하고 잘 변경되나 확인
data %>% group_by(f011) %>% mutate(p036 = (rank(p036)/n()*100) %>% round(0)) %>% ungroup %>% select(f011,p036) %>% head(3)
# 분위값으로 대체하기
data %<>% group_by(f011) %>% mutate(p036 = (rank(p036)/n()*100) %>% round(0)) %>% ungroup
# 교육수준 교육년수로 전환하기
data %<>% mutate(p028z = case_when(
p028z == "초졸이하" ~ 6,
p028z == "중졸" ~ 9,
p028z == "고졸" ~ 12,
p028z == "전문대졸" ~ 14.5,
p028z == "대졸" ~ 16,
p028z == "대학원졸" ~ 18,
))
data %<>% mutate(p031z = case_when(
p031z == "초졸이하" ~ 6,
p031z == "중졸" ~ 9,
p031z == "고졸" ~ 12,
p031z == "전문대졸" ~ 14.5,
p031z == "대졸" ~ 16,
p031z == "대학원졸" ~ 18,
))
# 둘중 높은 값만 남기기
data %<>% mutate(edu = ifelse(p028z>=p031z,p028z,p031z))
# 입학년도 별 백분위 값으로 전환하기
data %<>% group_by(f011) %>% mutate(edu = (rank(edu)/n()*100) %>% round(0)) %>% ungroup
# 대졸이상 비율 구하기
data %<>% group_by(p032) %>% mutate(p032 = mean(p028z>=16)) %>% ungroup
data %<>% group_by(p033) %>% mutate(p033 = mean(p031z>=16)) %>% ungroup
# 부모의 대졸이상 비율 평균 구하기
data %<>% mutate(job = (p032+p033)/2)
# 대졸이상 비율을 백분위 값으로 전환하기
data %<>% group_by(f011) %>% mutate(job = (rank(job)/n()*100) %>% round(0)) %>% ungroup
data %>% mutate(total = )
data %>% select(p034,p036,edu,job) %>% head(3)
data %>% mutate(total = (p034+p036+edu+job)) %>% group_by(f011) %>% mutate(total=(rank(total))/n()*100) %>% round(0)) %>% ungroup %>% select(total) %>% head(3)
data %>% mutate(total = (p034+p036+edu+job)) %>% group_by(f011) %>% mutate(total=(rank(total)/n()*100) %>% round(0)) %>% ungroup %>% select(total) %>% head(3)
data %>% mutate(total = (p034+p036+edu+job)) %>% group_by(f011) %>% mutate(total=(rank(total)/n()*100) %>% round(0)) %>% ungroup %>% select(total,f011)
# 가족배경 종합지표 만들기
data %<>% mutate(total = (p034+p036+edu+job)) %>% group_by(f011) %>% mutate(total=(rank(total)/n()*100) %>% round(0)) %>% ungroup
data %>% select(total)
install.packages("readstata13",repos="http://cran.us.r-project.org")
install.packages("tidyverse",repos="http://cran.us.r-project.org")
library(readstata13)
library(tidyverse)
library(magrittr)
# 데이터 불러오기
setwd("D:/3학년/2학기/32기피셋/클린업/2주차/[23년도 2학기]클린업 2주차 패키지/data")
goms17 <- read.dta13("goms2017.dta")
goms18 <- read.dta13("goms2018.dta")
goms16_col <- read.dta13("goms_col_16.dta")
goms17_col <- read.dta13("goms_col_17.dta")
goms17 %<>% select(g161pid:g161gradum,c("g161f","g161p") %>% starts_with)
goms18 %<>% select(g171pid:g171gradum,c("g171f","g171p") %>% starts_with)
#필요한 열 선택하고 나머지 지우기
#추후 병합할 예정
goms17_161f <- goms17 %>% select(g161f001:g161f017,g161f170)
goms18_171f <- goms18 %>% select(g171f001:g171f017)
goms17 %<>% select(-starts_with("g161f"))
goms18 %<>% select(-starts_with("g171f"))
#필요한 열 선택하고 나머지 지우기
#추후 병합할 예정
goms17_161p <- goms17 %>% select(g161p018:g161p036)
goms18_171p <- goms18 %>% select(g171p018:g171p036)
goms17 %<>%  select(-starts_with("g161p"),g161pid)
goms18 %<>%  select(-starts_with("g171p"),g171pid)
goms18 %<>% select(-c(g171dpmt_n,g171major_n))
# 문제 3,4 한거 병합
goms17 <- bind_cols(goms17_161f,goms17_161p,goms17)
goms18 <- bind_cols(goms18_171f,goms18_171p,goms18)
# id 기준으로 병합
goms17 <- left_join(goms17,goms16_col %>% select(pid,colnam),by=c("g161pid"="pid"))
goms18 <- left_join(goms18,goms17_col %>% select(pid,colnam),by=c("g171pid"="pid"))
# 앞에 붙은 접두사 제거하기
goms17 %<>% rename_with(~gsub("g161","",.))
goms18 %<>% rename_with(~gsub("g171","",.))
# 싹다 병합하기
goms17 %<>% mutate(year = "2017")
goms18 %<>% mutate(year = "2018")
data <- bind_rows(goms17,goms18)
# 4년제만 선택
data %<>% filter(school=='4년제')
# 전처리 된거 확인인
data %>% select(school) %>% unique
# 1988~1994 출생자 선택
data %<>% filter(birthy>=1988 & birthy <=1994)
# 전처리 확인
data %>% select(birthy) %>% unique
# 졸업시기와 대학입학 시기 간견이 3년 이상인 경우 제거
data %<>% filter(f011-f001<3)
# 전처리 확인
data %>% filter(f011-f001 >= 3) %>% dim
# 편입일 경우 제거
data %<>% filter(f010!="편입")
# 전처리 확인
data %>% filter(f010=="편입") %>% dim
# 상위권 대학교는 1로 나머지는 0 으로 변경
target_univ<-c("경희대학교","고려대학교","서강대학교","서울대학교","서울시립대학교","성균관대학교","연세대학교","이화여대학교","중앙대학교","한국외국어대학교","한양대학교","한국과학기술원","포항공과대학교")
data %<>% mutate(colnam = ifelse((colnam %in% target_univ | majorcat =="의약"),1,0))
# 전처리 확인
data %>% filter(colnam==1) %>% dim
# p034 모름/무응답 제거하기
data %<>% filter(p034!="모름/무응답")
# 소득분위 중위값으로 대체하기
data %<>% mutate(
p034 = case_when(
p034 == "1,000만원 이상" ~1000,
p034 == "700~1,000만원 미만" ~ 850,
p034 == "500~700만원 미만" ~ 600,
p034 == "400~500만원 미만" ~ 450,
p034 == "300~400만원 미만" ~ 350,
p034 == "200~300만원 미만" ~ 250,
p034 == "100~200만원 미만" ~ 150,
p034 == "100만원 미만" ~ 100,
p034 == "소득없음" ~ 0,
p034 == "안계심(사망)" ~ 0,
)
)
# 백분위 구하고 잘 변경되나 확인
data %>% group_by(f011) %>% mutate(p034 = (rank(p034)/n()*100) %>% round(0)) %>% ungroup %>% select(f011,p034) %>% head(3)
# 분위값으로 대체하기
data %<>% group_by(f011) %>% mutate(p034 = (rank(p034)/n()*100) %>% round(0)) %>% ungroup
data %>% select(p036) %>% unique
# 모름/무응답 제거
data %<>% filter(p036!="모름/무응답")
# 부모 자산 정도 중위값 대체하기
data %<>% mutate(
p036 = case_when(
p036 == "10억 원 이상" ~10,
p036 == "5억 원 ~ 10억 원 미만" ~ 7.5,
p036 == "3억 원 ~ 5억 원 미만" ~ 4,
p036 == "1억 5천만 원 ~ 3억 원 미만" ~ 2.25,
p036 == "5천만 원 ~ 1억 5천만 원 미만" ~ 1,
p036 == "5천만 원 미만" ~ 0.5,
p036 == "안계심(사망)" ~ 0,
)
)
# 백분위 구하고 잘 변경되나 확인
data %>% group_by(f011) %>% mutate(p036 = (rank(p036)/n()*100) %>% round(0)) %>% ungroup %>% select(f011,p036) %>% head(3)
# 분위값으로 대체하기
data %<>% group_by(f011) %>% mutate(p036 = (rank(p036)/n()*100) %>% round(0)) %>% ungroup
# 교육수준 교육년수로 전환하기
data %<>% mutate(p028z = case_when(
p028z == "초졸이하" ~ 6,
p028z == "중졸" ~ 9,
p028z == "고졸" ~ 12,
p028z == "전문대졸" ~ 14.5,
p028z == "대졸" ~ 16,
p028z == "대학원졸" ~ 18,
))
data %<>% mutate(p031z = case_when(
p031z == "초졸이하" ~ 6,
p031z == "중졸" ~ 9,
p031z == "고졸" ~ 12,
p031z == "전문대졸" ~ 14.5,
p031z == "대졸" ~ 16,
p031z == "대학원졸" ~ 18,
))
# 둘중 높은 값만 남기기
data %<>% mutate(edu = ifelse(p028z>=p031z,p028z,p031z))
# 입학년도 별 백분위 값으로 전환하기
data %<>% group_by(f011) %>% mutate(edu = (rank(edu)/n()*100) %>% round(0)) %>% ungroup
# 대졸이상 비율 구하기
data %<>% group_by(p032) %>% mutate(p032 = mean(p028z>=16)) %>% ungroup
data %<>% group_by(p033) %>% mutate(p033 = mean(p031z>=16)) %>% ungroup
# 부모의 대졸이상 비율 평균 구하기
data %<>% mutate(job = (p032+p033)/2)
# 대졸이상 비율을 백분위 값으로 전환하기
data %<>% group_by(f011) %>% mutate(job = (rank(job)/n()*100) %>% round(0)) %>% ungroup
# 잘되나 확인용
data %>% mutate(total = (p034+p036+edu+job)) %>% group_by(f011) %>% mutate(total=(rank(total)/n()*100) %>% round(0)) %>% ungroup %>% select(total,f011)
# 가족배경 종합지표 만들기
data %<>% mutate(total = (p034+p036+edu+job)) %>% group_by(f011) %>% mutate(total=(rank(total)/n()*100) %>% round(0) %>% divide_by(10)) %>% ungroup
data %>% select(total)
